{"version":3,"file":"checkbox.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/checkbox/checkbox.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Component, Input, HostBinding, forwardRef, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { NbComponentStatus } from '../component-status';\nimport { convertToBoolProperty } from '../helpers';\n\n/**\n * Styled checkbox component\n *\n * @stacked-example(Showcase, checkbox/checkbox-showcase.component)\n *\n * ### Installation\n *\n * Import `NbCheckboxComponent` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbCheckboxModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Can have one of the following statuses: danger, success or warning\n *\n * @stacked-example(Colored Checkboxes, checkbox/checkbox-status.component)\n *\n * @additional-example(Disabled Checkbox, checkbox/checkbox-disabled.component)\n * @additional-example(Indeterminate Checkbox, checkbox/checkbox-indeterminate.component)\n *\n * @styles\n *\n * checkbox-height:\n * checkbox-width:\n * checkbox-border-style:\n * checkbox-border-width:\n * checkbox-border-radius:\n * checkbox-outline-width:\n * checkbox-outline-color:\n * checkbox-text-color:\n * checkbox-text-font-family:\n * checkbox-text-font-size:\n * checkbox-text-font-weight:\n * checkbox-text-line-height:\n * checkbox-disabled-background-color:\n * checkbox-disabled-border-color:\n * checkbox-disabled-checkmark-color:\n * checkbox-disabled-text-color:\n * checkbox-primary-background-color:\n * checkbox-primary-border-color:\n * checkbox-primary-checked-background-color:\n * checkbox-primary-checked-border-color:\n * checkbox-primary-checked-checkmark-color:\n * checkbox-primary-indeterminate-background-color:\n * checkbox-primary-indeterminate-border-color:\n * checkbox-primary-indeterminate-checkmark-color:\n * checkbox-primary-focus-background-color:\n * checkbox-primary-hover-background-color:\n * checkbox-primary-hover-border-color:\n * checkbox-primary-active-background-color:\n * checkbox-primary-active-border-color:\n * checkbox-success-background-color:\n * checkbox-success-border-color:\n * checkbox-success-checked-background-color:\n * checkbox-success-checked-border-color:\n * checkbox-success-checked-checkmark-color:\n * checkbox-success-indeterminate-background-color:\n * checkbox-success-indeterminate-border-color:\n * checkbox-success-indeterminate-checkmark-color:\n * checkbox-success-focus-background-color:\n * checkbox-success-hover-background-color:\n * checkbox-success-hover-border-color:\n * checkbox-success-active-background-color:\n * checkbox-success-active-border-color:\n * checkbox-warning-background-color:\n * checkbox-warning-border-color:\n * checkbox-warning-checked-background-color:\n * checkbox-warning-checked-border-color:\n * checkbox-warning-checked-checkmark-color:\n * checkbox-warning-indeterminate-background-color:\n * checkbox-warning-indeterminate-border-color:\n * checkbox-warning-indeterminate-checkmark-color:\n * checkbox-warning-focus-background-color:\n * checkbox-warning-hover-background-color:\n * checkbox-warning-hover-border-color:\n * checkbox-warning-active-background-color:\n * checkbox-warning-active-border-color:\n * checkbox-danger-background-color:\n * checkbox-danger-border-color:\n * checkbox-danger-checked-background-color:\n * checkbox-danger-checked-border-color:\n * checkbox-danger-checked-checkmark-color:\n * checkbox-danger-indeterminate-background-color:\n * checkbox-danger-indeterminate-border-color:\n * checkbox-danger-indeterminate-checkmark-color:\n * checkbox-danger-focus-background-color:\n * checkbox-danger-hover-background-color:\n * checkbox-danger-hover-border-color:\n * checkbox-danger-active-background-color:\n * checkbox-danger-active-border-color:\n * checkbox-info-background-color:\n * checkbox-info-border-color:\n * checkbox-info-checked-background-color:\n * checkbox-info-checked-border-color:\n * checkbox-info-checked-checkmark-color:\n * checkbox-info-indeterminate-background-color:\n * checkbox-info-indeterminate-border-color:\n * checkbox-info-indeterminate-checkmark-color:\n * checkbox-info-focus-background-color:\n * checkbox-info-hover-background-color:\n * checkbox-info-hover-border-color:\n * checkbox-info-active-background-color:\n * checkbox-info-active-border-color:\n */\n@Component({\n  selector: 'nb-checkbox',\n  template: `\n    <label class=\"label\">\n      <input type=\"checkbox\" class=\"native-input visually-hidden\"\n             [disabled]=\"disabled\"\n             [checked]=\"value\"\n             (change)=\"updateValueAndIndeterminate($event)\"\n             (blur)=\"setTouched()\"\n             [indeterminate]=\"indeterminate\">\n      <span [class.indeterminate]=\"indeterminate\" [class.checked]=\"value\" class=\"custom-checkbox\">\n        <nb-icon *ngIf=\"indeterminate\" icon=\"minus-bold-outline\" pack=\"nebular-essentials\"></nb-icon>\n        <nb-icon *ngIf=\"value && !indeterminate\" icon=\"checkmark-bold-outline\" pack=\"nebular-essentials\"></nb-icon>\n      </span>\n      <span class=\"text\">\n        <ng-content></ng-content>\n      </span>\n    </label>\n  `,\n  styleUrls: [ `./checkbox.component.css` ],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NbCheckboxComponent),\n    multi: true,\n  }],\n})\nexport class NbCheckboxComponent implements ControlValueAccessor {\n\n  onChange: any = () => { };\n  onTouched: any = () => { };\n\n  /**\n   * Checkbox value\n   */\n  @Input()\n  get value(): boolean {\n    return this._value;\n  }\n  set value(value: boolean) {\n    this._value = value;\n    this.change.emit(value);\n    this.onChange(value);\n  }\n  private _value: boolean = false;\n\n  /**\n   * Controls input disabled state\n   */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = convertToBoolProperty(value);\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Checkbox status.\n   * Possible values are: `primary` (default), `success`, `warning`, `danger`, `info`\n   */\n  @Input()\n  status: NbComponentStatus = 'primary';\n\n\n  /**\n   * Controls checkbox indeterminate state\n   */\n  @Input()\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(value: boolean) {\n    this._indeterminate = convertToBoolProperty(value);\n  }\n  private _indeterminate: boolean = false;\n\n  @Output() change = new EventEmitter();\n\n  @HostBinding('class.status-primary')\n  get primary() {\n    return this.status === 'primary';\n  }\n\n  @HostBinding('class.status-success')\n  get success() {\n    return this.status === 'success';\n  }\n\n  @HostBinding('class.status-warning')\n  get warning() {\n    return this.status === 'warning';\n  }\n\n  @HostBinding('class.status-danger')\n  get danger() {\n    return this.status === 'danger';\n  }\n\n  @HostBinding('class.status-info')\n  get info() {\n    return this.status === 'info';\n  }\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  writeValue(val: any) {\n    this._value = val;\n    this.changeDetector.detectChanges();\n  }\n\n  setDisabledState(val: boolean) {\n    this.disabled = convertToBoolProperty(val);\n  }\n\n  setTouched() {\n    this.onTouched();\n  }\n\n  updateValueAndIndeterminate(event: Event): void {\n    const input = (event.target as HTMLInputElement);\n    this.value = input.checked;\n    this.indeterminate = input.indeterminate;\n  }\n}\n"]}